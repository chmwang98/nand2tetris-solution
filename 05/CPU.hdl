// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Not(in=instruction[15], out=aInstruction);  // 0 indicates a instruction
    Not(in=aInstruction, out=cInstruction);     // 1 indicates c instruction

    Mux16(a=instruction, b=aluOut, sel=cInstruction, out=aInput);
    // A register
    Or(a=aInstruction, b=instruction[5], out=loadA);  // load A register for either type
    ARegister(in=aInput, load=loadA, out=aOut, out[0..14]=addressM);

    Mux16(a=aOut, b=inM, sel=instruction[12], out=yMux);

    // D register
    And(a=cInstruction, b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=dOut);

    ALU(x=dOut, 
        y=yMux,
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=aluOut, 
        zr=zr, 
        ng=ng);

    And(a=cInstruction, b=instruction[3], out=writeM, out=loadM);
    Mux16(a=false, b=aluOut, sel=loadM, out=outM);

    And(a=cInstruction, b=instruction[2], out=j1);
    And(a=cInstruction, b=instruction[1], out=j2);
    And(a=cInstruction, b=instruction[0], out=j3);

    // jump condition
    Or(a=ng, b=zr, out=ngOrzr); // for JLE
    Not(in=ngOrzr, out=positive);

    And(a=j1, b=ng, out=jumpLT);    // JLT & negative
    And(a=j2, b=zr, out=jumpEQ);    // JEQ & zero
    And(a=j3, b=positive, out=jumpGT);  // JGT & positive

    Or(a=jumpLT, b=jumpEQ, out=jumpLEQ);
    Or(a=jumpGT, b=jumpLEQ, out=jump);
    And(a=cInstruction, b=jump, out=pcload);
    Not(in=pcload, out=pcinc);
    PC(in=aOut, load=pcload, inc=pcinc, reset=reset, out[0..14]=pc);
}